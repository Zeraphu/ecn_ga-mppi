#!/usr/bin/env python3

import numpy as np
import motionModel
import matplotlib.pyplot as plt

turtle = motionModel.MotionModel(dt=0.1)

# Generate a reference path with horizon steps in a straight line
horizon = 100
ref_path = np.zeros((horizon, 3))
for i in range(horizon - 1):
    ref_path[i+1][0] = ref_path[i][0] + turtle.v * turtle.dt

def generate_population(num_paths: int, horizon: int) -> np.ndarray:
    """
    Generates a population of paths for the robot to follow.
    Each path is generated by calling the predict method of the MotionModel class.
    """
    population = []
    for _ in range(num_paths):
        path = turtle.gen_path(horizon)
        population.append(path)
        turtle.reset()  # Reset the turtle for the next path
    return np.array(population)

def calculate_closest_path(population: np.ndarray, ref_path: np.ndarray) -> np.ndarray:
    """
    Calculate the closest path to the reference path using Euclidean distance.
    """
    closest_path = None
    min_distance = float('inf')
    
    for path in population:
        distance = np.linalg.norm(path - ref_path)
        if distance < min_distance:
            min_distance = distance
            closest_path = path
            
    return closest_path

def visualize(closest_path: np.ndarray):
    """
    Visualize the generated paths and the closest path to the reference path.
    """
    plt.figure()
    for i in range(len(population)):
        plt.plot(population[i][:, 0], population[i][:, 1])
    
    plt.plot(ref_path[:, 0], ref_path[:, 1], 
             'k--', label='Reference Path')
    # closest path highlighted with a thicker line
    plt.plot(closest_path[:, 0], closest_path[:, 1], 
             'r-', linewidth=5, label='Closest Path')
    plt.legend()
    plt.xlabel('X position')
    plt.ylabel('Y position')
    plt.title('Generated Paths')
    plt.show()

# Example usage
if __name__ == "__main__":
    num_paths = 10
    population = generate_population(num_paths, horizon)
    closest_path = calculate_closest_path(population, ref_path)
    visualize(closest_path)
